데이터 모델링
---------------- 
* 사람이 살아가면서 나타날 수 있는 다양한 션항에 대해서 일정한 표기법에 의해 규칙을 가지고 표기하는것 자체를 말한다.
* 정보시스템을 구축하기 위한 데이터 관점의 업무 분석 기법
* 현실세계의 데어터에 대해 약속된 표기법에 의해 표현하는 과정
* 데이터베이스 구축하기 위한 분석/설계의 과정

특징
---------------- 
추상화(다양한 현상을 일정한 양식의 표기법으로 표기)
단순화(약속된 규칙에 의해 제한된 표기법으로 쉽게 이해할 수 있도록 함)
명확화(애매모호함을 제거하고 정확하게 현상을 기술)

모델링의 관점
---------------- 
데이터 관점 : 업무-데이터, 데이터-데이터 의 관계에 대해서 모델링
프로세스 관점 : 업무가 무엇인지, 또는 무엇을 해야 하는지에 대한 모델링
데이터와 프로세스의 상관관점 : 업무가 처리하는 일의 방법에 때라 데이터가 어떻게 영향을 받는지 모델링

데이터 모델
---------------- 
* 데이터 모델을 잘 이해하면 기능과 성능적인 측면에서 효율적인 SQL 문장을 작성할 수 있다.

데이터 모델이 제공하는 기능
---------------- 
* 시스템 가시화
* 시스템의 구조와 행동 명세화
* 구조화된 틀을 제공
* 문서화
* 댜양한 관점 제공
* 특정 목표에 따라 상세 수준의 표현 방법 제공

데이터 모델링의 중요성 및 유의점
---------------- 
* 파급효과 : 시스템이 어느정도 완성되어가는 시점에서 많은 테스트들이 수행된다. 이러한 상황에서 데이터 구조가 변경되면 시스템 전체가 변경되어야 할 수도 있다. 이것은 데이터 설계가 중요한 과정이라는 것을 설명한다.
* 복잡한 정보 요구사항의 간결한 표현 : 데이터 모델은 시스템의 정보 요구사항과 한계를 가장 명확하고 간결하게 표현할 수 있다. 수많은 페이지의 요구사항을 파악하기 좋은 방법은 데이터 모델을 리뷰하면서 파악하는 것이다.
* 데이터 품질 : 데이터는 기간이 오래될 수록 활용가치가 큰 자산이 된다. 데이터 품질을 잘 유지할 수 있는 형태로 데이터 모델링을 해야한다.
** 중복 : 여러 장소에 같은 정보를 저장하면 안된다.
** 비유연성 : 데이터 정의-데이터의 사용 프로세스를 분리함으로써 프로세스의 변화가 데이터베이스에 영향을 최소화하도록 한다.
** 비일관성 : 데이터-데이터 간의 관계를 명확히 정의 해야 일련의 데이터를 모순 없이 수정가능해 진다.

데이터 모델링의 3단계 진행
---------------- 
* 개념적 데이터 모델링 : 추상적이고 포괄적인 수준, 전사적 데이터 모델링-조직의 데이터 요구를 공식화
* 논리적 데이터 모델링 : key, 속성, 관계 등을 정확하게 표현-누가, 어떻게 데이터에 접근하는지, 독립적 비지니스 데이터 기록, 정규화
* 물리적 데이터 모델링 : 실제 데이터베이스에 이식할 수 있도록 성능(속도), 저장(용량) 등을 고려하여 설계

프로젝트 생명 주기에서 데이터  모델링
---------------- 
* Waterfall : 분석(논리적 데이터 모델링)과 설계(물리적 데이터 모델링) 단계
* 나선형 모델 : 분석, 설계 과정에서 모두 수행. 분석단계에서 논리적 데이터 모델링이 더 많이 수행



데이터독립성의 필요성
---------------- 
* 유지보수 비용 절감
* 데이터 복잡도 감소
* 데이터 중복성 감소
* 요구사항 대응

데이터독립성 구조
---------------- 
* 데이터베이스 3단계 구조

![](/img/dataDependancy.JPG)

데이터독립성 요소
---------------- 
* 외부스키마 : 여러개의 사용자 관점 스키마
* 개념스키마 : 조직 전체의 DB를 기술. DB에 저장되는 데이터와 그들간의 관계를 표현하는 스키마
* 내부스키마 : 물러적 장치에서 데이터가 실제로 저장되는 방법을 표현하는 스키마

데이터독립성 
---------------- 
* 논리적독립성 : 개념스키마가 변경되어도 외부 스키마는 영향을 미치지 않도록 지원하는 것. 논리적 구조가 변경되어도 응용프로그램에 영향 없음.
* 물리적독립성 : 내부스키마가 변경되어도 외부/개념 스키마는 영향을 받지 않도록 지원하는 것. 저장장치의 변경은 응용 프로그램과 개념 스키마에 영향 없음.

사상
---------------- 
* 논리적사상 : 외부적 뷰와 개념적 뷰의 상호 관련성을 정의함.
* 물리적사상 : 개념적 뷰와 저장된 데이터베이스의 상호관련성을 정의


데이터 모델링의 세 가지 요소
---------------- 
* things : 지칭하는 용어
* attributes : 성격
* relationships : 다른 things와의 관계

단수/ 복수 용어 구분 정의
---------------- 

![](/img/dataDependancy.JPG)

* 복수 : Entity Type, Entity Set -> 단수 : Entity
* 복수 : Entity -> 단수 : Instance, Occurrence
* 패어링은 잘 사용 안함.
* 복수 : Attribute -> 단수 : Attribute Value

데이터 모델 표기법
---------------- 

* IE(Information Engineering)/ 까마귀발 모양 표기법-가장 많이 사용함

ERD(Entity Relationship Diagram) 작업 순서
---------------- 
1. 엔티티를 그린다.
* things 정의

2. 엔티티를 적절하게 배치한다.
* 왼쪽 상단(중요한 것)->오른쪽하단(하위 모델)

3. 엔티티간 관계를 설정한다.
* Primary Key 속성이 상속되는 식별자 관계 설정
* 중복 관계, Circle 관계 발생하지 않도록 주의

4. 관계명을 기술한다.
* 관계 이름을 현재형, 지나치게 포괄적이지 않은 용어로 기술

5. 관계의 참여도를 기술한다.
* 관계 차수 ex) 1:N

6. 관계의 필수 여부 
* 필수/선택 표시


좋은 데이터 모델의 요소
---------------- 
* 완전성 : 모든 데이터가 데이터 모델에 정의
* 중복배제 
* 업무규칙 : 데이터 모델에 업무 규칙이 표시 되어 모든 사용자(개발자, 관리자)가 해당 규칙에 대해 이해할 수 있어야한다.
* 데이터 재사용 : 데이터독립성이 높아야 데이터 재사용성을 향상시킬 수 있다.
* 의사소통 : 데이터 모델의 역할에 대해 상세히 표시
* 통합성 : 전체 조직관점에서 보와도 중복된 데이터가 존재하지 않도록 해야한다.


엔티티 정의
---------------- 
* 사람, 장소, 물건, 사건, 개념 등의 명사에 해당한다.
* 엔티티는 업무상 관리가 필요한 관심사에 해당한다.
* 저장이 되기 위한 어떤 것(thing) 이다.

업무에 필요하고 유용한 정보를 저장하고 관리하기 위한 집합적인 것


엔티티의 특징
---------------- 
* 업무에서 필요로 하는 정보 : 시스템 구축 대상인 업무에 그 엔티티가 사용되어야 한다.
* 식별 가능해야 함 : 업무적으로 의미를 가지는 인스턴스가 식별자에 의해 한 개씩만 존재하는지 검증해 보아야 한다.
* 인스턴스의 집합 : 엔티티는 두 개 이상의 집합개념이다.
* 업무프로세스에 의해 이용 : 실제 업무 프로세스에서 사용되어야 한다.
* 속성을 포함 : 식별자가 없거나 주식별자만 존재하면 적절한 엔티티라고 할 수 없다.
* 관계의 존재 : 다른 엔티티와 적절한 관계가 반드시 존재해야 한다.


엔티티의 분류
---------------- 
유무형에 따라
* 유형 엔티티 : 물리적 형태가 있고 안정적이며 지속적으로 활용되는 엔티티
* 개념 엔티티 : 개념적 정보로 분류-조직, 보험상품
* 사건 엔티티 : 업무를 수행 하면서 발생하는 엔티티-발생량이 많고 통계 자료에 이용될 수 있다.

발생시점에 따라
* 기본 엔티티 : 독립적으로 생성 가능하고 타 엔티티의 부모 역할을 한다.
* 중심 엔티티 : 기본 엔티티로부터 발생, 그 업무에 있어서 중심적인 역할을 한다.
* 행위 엔티티 : 두개 이상의 부모 엔티티로부터 발생. 분석 초기 단계에서는 잘 나타나지 않는다.

의존 여부에 따라
* 독립 엔티티
* 의존 엔티티


엔티티의 명명
---------------- 
* 현 업무에서 사용되는 용어
* 약어를 사용하지 않는다.
* 단수 명사를 사용
* 유일한 엔티티 이름이어야 한다.


속성(Attribute)의 개념
---------------- 
* 업무에서 필요로 하는 인스턴스로 관리하고자 하는 의미상 더 이상 분리되지 않는 최소의 데이터 단위

엔티티, 인스턴스, 속성, 속성값의 관계
---------------- 
* 한 개의 엔티티는 두 개 이상의 인스턴스의 집합이어야 한다.
* 한 개의 엔티티는 두 개 이상의 속성을 갖는다.
* 한 개의 속성은 한 개의 속성값을 갖는다.

속성의 특징
---------------- 
* 반드시 해당 업무에서 필요하고 관리하고자 하는 정보이어야 한다.
* 정규화 이론에 근간하여 정해진 주식별자에 함수적 종속성을 가져야 한다.
* 하나의 속성에는 한 개의 값만 가진다. 다중 값일 경우 별도의 엔티티로 분리 한다.

속성의 분류
---------------- 
속성의 특성에 따른 분류
* 기본 속성 : 코드성 데이터, 엔티티를 식별하기 위해 부여된 일련번호, 다른 속성을 계싼하거나 영향을 받아 생성된 속성을 제외한 모든 속성
* 설계 속성 : 업무를 규칙화하기 위해 속성을 새로 만들거나 변형하여 정의하는 속성. ex) 일련번호
* 파생 속성 : 다른 속성에 영향을 받아 발생하는 속성. 될 수 있으면 적게 정의하는 것이 좋다.

엔티티 구성방식에 따른 분류
* PK(Primary Key) : 엔티티를 식별할 수 있는 속성
* FK(Foreigh Key) : 다른 엔티티와의 관계에서 포함된 속성
* 일반 속성

속성의 세부 속성에 따른 분류
* 복합속성
* 단순속성


속성의 도메인
---------------- 
* 속성이 가질 수 있는 값의 범위

속성의 명명
---------------- 
* 해당 업무에서 사용하는 이름을 부여 한다.
* 서술식 속성명은 사용하지 않는다.
* 약어사용은 가급적 제한한다.
* 전체 데이터모델에서 유일성을 확보하는 것이 좋다.



관계의 정의
---------------- 
* 엔티티의 인스턴스 사이의 논리적인 연관성으로서 존재의 형태로서나 행위로서 서로에게 연관성이 푸여된 상태

관계의 페어링
---------------- 
* 엔티티 안의 인스턴스가 개별적으로 관계를 가지는 것
* 두 엔티티 사이에 두 개 이상의 관계가 형성될 수 있다.

관계의 분류
---------------- 
* 존재에 의한 관계 : 연관관계 (소속된다)
* 행위에 의한 관계 : 의존관계 (주문한다)

관계의 표기
---------------- 
* 관계명(Membership) : 관계의 이름
* 관계차수(Cardinality) : 1:1, 1:M, M:N
* 관계선택사양(Optionality) : 필수관계, 선택관계




식별자
---------------- 
엔티티는 인스턴스의 집합이기 때문에 각 인스턴스를 구분할 수 있는 식별자가 필요하다.

식별자의 특징
---------------- 
* 유일성 : 주식별자에 의해 엔티티 내의 모든 인스턴스들을 유일하게 구분함
* 최소성 : 주식별자를 구성하는 속성의 수는 유일성을 만족하는 최소의 수가 되어야함.
* 불변성 : 주식별자가 한 번 특정 엩티티에 지정되면 그 식별자의 값은 변하지 않아야함
* 존재성 : 반드시 Null 이 아니어야 한다.

식별자 분류
---------------- 
* 대표성 유무 : 주식별자/부식별자
* 스스로 생성 여부 : 내부식별자/외부식별자
* 단일속성 유무 : 단일식별자/복합식별자
* 대체여부 : 본질식별자/인조식별자

주식별자 도출 기준 
---------------- 
* 업무에서 자주 이용되는 속성을 주식별자로 지정되도록 함 : 후보키 중 가장 많이 이용되는 것을 주 식별자로 하는게 좋다.
* 명칭, 내역 등과 같이 이름으로 기술되는 것은 피함
* 속성의 수가 많아지지 않도록 함 : 최소성, 어쩔수 없는 경우 인조 식별자를 만든다.

식별자관계와 비식별자관계에 따른 식별자
---------------- 
* 식별자관계와 비식별자 관계의 결정 : 자식엔티티의 외부식별자를 주 식별자로 넣을 것인지 잘 결정해야한다.
* 식별자관계 : 자식엔티티가 부모엔티티에게서 외부식별자를 얻는경우 Null 이면 안되기 때문에 반드시 부모 가 먼저 생성되어야 한다. 스스로 가지고 있는 속성과 함께 주식별자가 된다면 1:M 관계가 될 수 있다.
* 비식별자관계 : 부모 없는 자식 엔티티가 생성될 수 있는 경우. 부모 엔티티가 자식 엔티티를 남겨두고 먼저 소멸할 수 있는 경우.

식별자관계로만 설정할 경우의 문제점
---------------- 
* 자식엔티티의 자식엔티티가 있을 경우 주식별자가 지나치게 많아질 수 있다.

비식별자관계로만 설정할 경우의 문제점
---------------- 
* 부모 엔티티의 자식 엔티티간의 Join 시 불필요하게 부모 엔티티를 조회해야할 경우가 생긴다.

식별자관계와 비식별자관계 모델링
---------------- 
* 강한 연결 관계 / 약한 연결 관계 : 상속 필요 여부, 독립성 필요 여부 등을 고려